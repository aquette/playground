## RFC1 - Hardware Monitor Protocol

This connects a HARDWARE peer to a MONITOR peer.

The HARDWARE peer creates a PUB socket and connects to port 5560 on the MONITOR peer system.
The MONITOR peer creates a SUB socket, subscribes to "" (all data) and binds to port 5560 on all interfaces ("*").

The protocol consists of two messages:

* name/ON - the HARDWARE is in "power on" state 
* name/OFF - the HARDWARE is on "power off" state

Where "name" is a unique name for the HARDWARE node, and "/" indicates a multipart message.

The HARDWARE peer MUST send a state message at regular intervals, e.g. once per second otherwise it's considered gone.


## RFC2 - Alert Gateway Protocol

This connects a MONITOR peer to a GATEWAY peer.

The MONITOR peer creates a PUB socket, subscribes to "" (all data) and connects to port 5561 on the MONITOR peer system.
The GATEWAY peer creates a SUB socket and binds to port 5561 on all interfaces ("*").

The protocol consists of one message:

* name/ALERT/STATE - a specified asset has changed state. This message does not contain further information.

Where "name" is a unique name for the asset, and "/" indicates a multipart message. STATE values "ON", "OFF", "GONE".

The MONITOR peer MUST send a state (HE/ART/BEET) message at reguar intervals, e.g. once per second otherwise it's considered gone.


## RFC3 - Zyre Leader Election Protocol

This protocol establishes which node in a Zyre cluster is leader. In this case the leader hosts a Malamute server. However the protocol does not depend on that, and can work without Malamute.

* Each node SHALL have two states, LEADER and FOLLOWER.
* Each node SHALL join the MALAMUTE group.
* When a node becomes LEADER, it SHALL create a Malamute server.
* When a node becomes FOLLOWER, it SHALL create a Malamute client and connect to the LEADER endpoint. It SHALL also store the LEADER UUID.
* When a node is LEADER, it SHALL shout to the MALAMUTE group every second, sending its Malamute endpoint as message payload.
* All nodes SHALL listen to the MALAMUTE group and read all events on it.
* Nodes SHALL ignore all events from nodes with lower UUIDs.
* When a LEADER node receives an event (from another node with a higher UUID) it SHALL destroy its Malamute instance and become FOLLOWER.
* When a FOLLOWER node receives an event it SHALL consider this node to be the new LEADER, if the sender's UUID is higher than the previous LEADER's UUID.
* When a FOLLOWER receives no events within a timeframe of 3-5 seconds, it SHALL become LEADER.


